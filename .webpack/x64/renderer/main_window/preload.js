/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/preload.ts":
/*!************************!*\
  !*** ./src/preload.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{\n/**\n * Preload script for secure IPC communication between main and renderer processes\n * This script runs in a sandboxed environment with access to both Node.js APIs and the DOM\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst electron_1 = __webpack_require__(/*! electron */ \"electron\");\n// Security: Validate that we're running in the correct context\nif (!process.contextIsolated) {\n    throw new Error('Context isolation must be enabled in the BrowserWindow');\n}\n// Note: process.nodeIntegration is not available in preload context\n// The security is enforced by the main process configuration\n// Create the secure API surface\nconst electronAPI = {\n    // Application operations\n    app: {\n        getVersion: () => electron_1.ipcRenderer.invoke('app:getVersion'),\n        quit: () => electron_1.ipcRenderer.invoke('app:quit'),\n        minimize: () => electron_1.ipcRenderer.invoke('app:minimize'),\n        maximize: () => electron_1.ipcRenderer.invoke('app:maximize'),\n        isMaximized: () => electron_1.ipcRenderer.invoke('app:isMaximized'),\n        unmaximize: () => electron_1.ipcRenderer.invoke('app:unmaximize'),\n        close: () => electron_1.ipcRenderer.invoke('app:close'),\n    },\n    // File system operations\n    fs: {\n        exists: (path) => electron_1.ipcRenderer.invoke('fs:exists', path),\n        readJson: (path) => electron_1.ipcRenderer.invoke('fs:readJson', path),\n        writeJson: (path, data) => electron_1.ipcRenderer.invoke('fs:writeJson', path, data),\n        readText: (path, encoding) => electron_1.ipcRenderer.invoke('fs:readText', path, encoding),\n        writeText: (path, content, encoding) => electron_1.ipcRenderer.invoke('fs:writeText', path, content, encoding),\n        delete: (path) => electron_1.ipcRenderer.invoke('fs:delete', path),\n        copy: (src, dest) => electron_1.ipcRenderer.invoke('fs:copy', src, dest),\n        move: (src, dest) => electron_1.ipcRenderer.invoke('fs:move', src, dest),\n        getStats: (path) => electron_1.ipcRenderer.invoke('fs:getStats', path),\n        listFiles: (dirPath) => electron_1.ipcRenderer.invoke('fs:listFiles', dirPath),\n        listDirectories: (dirPath) => electron_1.ipcRenderer.invoke('fs:listDirectories', dirPath),\n        ensureDirectory: (dirPath) => electron_1.ipcRenderer.invoke('fs:ensureDirectory', dirPath),\n        getSize: (path) => electron_1.ipcRenderer.invoke('fs:getSize', path),\n        formatSize: (bytes) => electron_1.ipcRenderer.invoke('fs:formatSize', bytes),\n        sanitizeFilename: (filename) => electron_1.ipcRenderer.invoke('fs:sanitizeFilename', filename),\n        createUniqueFilename: (path) => electron_1.ipcRenderer.invoke('fs:createUniqueFilename', path),\n        getAppPaths: () => electron_1.ipcRenderer.invoke('fs:getAppPaths'),\n        initializeDirectories: () => electron_1.ipcRenderer.invoke('fs:initializeDirectories'),\n        cleanupTempFiles: () => electron_1.ipcRenderer.invoke('fs:cleanupTempFiles'),\n        selectDirectory: () => electron_1.ipcRenderer.invoke('fs:selectDirectory'),\n    },\n    // Settings management\n    settings: {\n        get: (key) => electron_1.ipcRenderer.invoke('settings:get', key),\n        set: (key, value) => electron_1.ipcRenderer.invoke('settings:set', key, value),\n        getAll: () => electron_1.ipcRenderer.invoke('settings:getAll'),\n        reset: () => electron_1.ipcRenderer.invoke('settings:reset'),\n        hasCustomValue: (key) => electron_1.ipcRenderer.invoke('settings:hasCustomValue', key),\n        getStorePath: () => electron_1.ipcRenderer.invoke('settings:getStorePath'),\n        validate: () => electron_1.ipcRenderer.invoke('settings:validate'),\n        export: () => electron_1.ipcRenderer.invoke('settings:export'),\n        import: (jsonString) => electron_1.ipcRenderer.invoke('settings:import', jsonString),\n        initializeDownloadLocation: () => electron_1.ipcRenderer.invoke('settings:initializeDownloadLocation'),\n    },\n    // Playlist operations (for future implementation)\n    playlist: {\n        getAll: (options) => electron_1.ipcRenderer.invoke('playlist:getAll', options),\n        getById: (playlistId) => electron_1.ipcRenderer.invoke('playlist:getById', playlistId),\n        create: (input) => electron_1.ipcRenderer.invoke('playlist:create', input),\n        update: (playlistId, updates) => electron_1.ipcRenderer.invoke('playlist:update', playlistId, updates),\n        delete: (playlistId) => electron_1.ipcRenderer.invoke('playlist:delete', playlistId),\n        searchVideos: (options) => electron_1.ipcRenderer.invoke('playlist:searchVideos', options),\n        addVideo: (playlistId, videoId) => electron_1.ipcRenderer.invoke('playlist:addVideo', playlistId, videoId),\n        removeVideo: (playlistId, videoId) => electron_1.ipcRenderer.invoke('playlist:removeVideo', playlistId, videoId),\n        reorderVideos: (playlistId, videoOrders) => electron_1.ipcRenderer.invoke('playlist:reorderVideos', playlistId, videoOrders),\n        getStats: (playlistId) => electron_1.ipcRenderer.invoke('playlist:getStats', playlistId),\n    },\n    // YouTube operations (for future implementation)\n    youtube: {\n        getPlaylistMetadata: (url) => electron_1.ipcRenderer.invoke('youtube:getPlaylistMetadata', url),\n        importPlaylist: (url) => electron_1.ipcRenderer.invoke('youtube:importPlaylist', url),\n        getVideoQualities: (videoId) => electron_1.ipcRenderer.invoke('youtube:getVideoQualities', videoId),\n        checkAvailability: () => electron_1.ipcRenderer.invoke('youtube:checkAvailability'),\n        updateYtDlp: () => electron_1.ipcRenderer.invoke('youtube:updateYtDlp'),\n        validateUrl: (url) => electron_1.ipcRenderer.invoke('youtube:validateUrl', url),\n        onImportProgress: (callback) => {\n            const wrappedCallback = (_event, data) => callback(_event, data);\n            electron_1.ipcRenderer.on('youtube:importProgress', wrappedCallback);\n            // Return cleanup function\n            return () => electron_1.ipcRenderer.removeListener('youtube:importProgress', wrappedCallback);\n        },\n    },\n    // Legacy methods for backward compatibility\n    getPlaylistMetadata: (url) => electron_1.ipcRenderer.invoke('playlist:getMetadata', url),\n    startImport: (url) => electron_1.ipcRenderer.invoke('import:start', url),\n    onTaskUpdate: (callback) => {\n        const wrappedCallback = (_event, data) => callback(_event, data);\n        electron_1.ipcRenderer.on('task:update', wrappedCallback);\n        // Return cleanup function\n        return () => electron_1.ipcRenderer.removeListener('task:update', wrappedCallback);\n    },\n    getPlaylistDetails: (playlistId) => electron_1.ipcRenderer.invoke('getPlaylistDetails', playlistId),\n    getPlaylists: () => electron_1.ipcRenderer.invoke('getPlaylists'),\n};\n// Security: Only expose the API through contextBridge\ntry {\n    electron_1.contextBridge.exposeInMainWorld('api', electronAPI);\n    // Log successful initialization in development\n    if (true) {\n        console.log('✅ Preload script initialized successfully');\n        console.log('🔒 Context isolation enabled');\n        console.log('🚫 Node integration disabled');\n    }\n}\ncatch (error) {\n    console.error('❌ Failed to expose API through context bridge:', error);\n    throw error;\n}\n// DOM Content Loaded handler for version display\nwindow.addEventListener('DOMContentLoaded', () => {\n    const replaceText = (selector, text) => {\n        const element = document.getElementById(selector);\n        if (element) {\n            element.innerText = text;\n        }\n    };\n    // Display version information\n    for (const dependency of ['chrome', 'node', 'electron']) {\n        const version = process.versions[dependency];\n        if (version) {\n            replaceText(`${dependency}-version`, version);\n        }\n    }\n});\n// Security: Prevent access to Node.js globals in renderer\ndelete globalThis.require;\ndelete globalThis.exports;\ndelete globalThis.module;\n// Log security status in development\nif (true) {\n    console.log('🔒 Security measures applied:');\n    console.log('  - Node.js globals removed from renderer context');\n    console.log('  - IPC communication secured through context bridge');\n    console.log('  - API surface limited to approved methods');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/preload.ts\n\n}");

/***/ }),

/***/ "electron":
/*!***************************!*\
  !*** external "electron" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("electron");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/preload.ts");
/******/ 	
/******/ })()
;